Lighter 未来版本迭代计划

// 这些是原定计划，但是目前来看可能会废弃，直接跳到 v2.0 版本，使用 go 语言来重构，
// 并且会把下面部分提到的功能点做了，同时加入更多分布式的东西让这个服务看起来更加生产化，
// 加入持久化功能，加入集群或者负载均衡的能力，加入高可用的能力，
// 所以推出 1.x 版本计划，在完成上面的重构和下面的功能点之前都将处于 1.x 版本，
// 只有等完成了经过测试才升到第一个 v2.0 Beta 版本 

// =============================== 废弃 ====================================
1.3.4 版本：
    1. 更新 Tuz 到最新版。
    2. 使用 Netty 自带的 CorsHandler 去处理跨域问题（CorsConfigBuilder 配置类）
    3. 使用 Netty 自带的 QueryStringDecoder 解析请求 path 和参数
    
1.3.5 版本：
    1. 简化某些抽象层，一味地提高扩展性会引发一些问题，这边需要做一次小的 “冗余化” 重构。
       （重新设计这个接口抽象，固定一些东西，现在这个东西太贪心了，杂食也就意味着四不像，需要重新考虑这个服务的定位！！！）
       （简化功能（本来功能就不多还简化哈哈哈：)。。。），这个简化不是说要删除功能，而是要进一步突出功能。）
       （比如协议就定位为 HTTP，考虑使用 SQL 去操作数据，这样适用性或许更大？）

1.3.6 版本：
    1. 考虑加入消息订阅或者说数据变更通知的功能（考虑使用 websocket 还是 sse，目前来看 sse 局限性更大）

1.4.0 版本：
    1. 使用 Groovy 重构代码
// =============================== 废弃 ====================================


// =============================== 启用 ====================================
1.x.0 版本：
    1. 使用 Go 重构代码
    2. 简化某些抽象层，一味地提高扩展性会引发一些问题，这边需要做一次小的 “冗余化” 重构。

1.x.1 版本：
    1. 加入简单的持久化功能，主要是提供三种模式，off，after action 和 after delay
    （off 是关闭持久化，after action 是指在每一次操作之后都进行持久化，
    after delay 是指在指定的时间间隔之后进行持久化，这个时间间隔可以指定，默认为 3 秒。
    持久化的存储模式需要考虑，包括文件类型，IO 读写效率，如何恢复到内存等等）

1.x.2 版本：
    1. 升级持久化功能，加入持久化文件的大小限制，甚至是自动切割等等
    （持久化文件大小默认限制为 1 GB，如果加入自动切割文件的功能，这些文件如何组织？如何恢复到内存？）

1.x.3 版本：
    1. 加入集群或者负载均衡的能力，包括缓存容量的扩展等等
    （集群和负载均衡需要考虑状态的问题，因为这是缓存数据服务，有状态。
    缓存容量的扩展前期先做停机扩展，后面再考虑运行期无缝扩展。）

1.x.4 版本：
    1. 升级集群或者负载均衡的能力，提高 HA 的能力，考虑加入服务预警通知功能
    （后面加入预警通知的条件管理，这个可能需要在有服务管理界面的前提下做，也就意味着需要提供大量 SDK api 供外部调用）

1.x.5 版本：
    1. 加入初步的 SDK 能力，提供一些服务信息的 api 给外界调用
    （这是给后续做服务管理界面铺路）

1.x.6 版本：
    1. 升级 SDK 能力，提供一些服务管理的 api 给外界调用
    2. 给 SDK 加入安全组的功能，需要做用户校验，考虑给整个服务加入这个功能（可能会影响性能）

1.x.7 版本：
    1. 加入操作埋点，记录操作的指令，操作的值，操作的次数，这样可以知道一些缓存数据的价值，比如被访问次数
    2. 增加 SDK api，配合这次的版本迭代


...

// 上面的版本只是临时的，如果中间出现问题需要修复，就会占用下一个版本号